generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "tasky"]
}

model Tasks {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Title       String
  Description String?
  isComplete  Boolean
  Categories  Json[]    @default([])
  UserId      String
  Priority    String    @default("No Priority")
  CreatedAt   DateTime  @default(now())
  Deadline    DateTime?

  @@schema("tasky")
}

model Projects {
  id               String    @id
  name             String
  description      String
  image            String
  link             String
  github           String
  tech             String[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  projectInitiated DateTime
  projectCompleted DateTime?
  isCompleted      Boolean   @default(false)

  @@schema("public")
}

model accounts {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@schema("public")
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

model users {
  id             String     @id
  name           String?
  email          String?    @unique
  email_verified DateTime?
  username       String     @unique
  image          String?
  password       String
  isAdmin        Boolean    @default(false)
  accounts       accounts[]
  sessions       sessions[]

  @@schema("public")
}

model verificationtokens {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@schema("public")
}

model Categories {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryName Json[]  @default([])
  userId       String?

  @@schema("tasky")
}
